type: edu
files:
  - name: src/mealplanner/Main.java
    visible: true
    text: |-
      package mealplanner;
      
      public class Main {
        public static void main(String[] args) {
          System.out.println("Hello World!");
        }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      repositories {
          mavenCentral()
      }
      
      dependencies {
          implementation 'org.postgresql:postgresql:42.2.27'
      }
    learner_created: false
  - name: test/MealPlannerTests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.sql.*;
      import java.util.*;
      
      class Column {
        public String first;
        public String second;
      
        public Column(String first, String second) {
          this.first = first;
          this.second = second;
        }
      
        @Override
        public boolean equals(Object o) {
          if (this == o) return true;
          if (o == null || getClass() != o.getClass()) return false;
          Column column = (Column) o;
          return Objects.equals(first, column.first) && Objects.equals(second, column.second);
        }
      
        @Override
        public int hashCode() {
          return Objects.hash(first, second);
        }
      }
      
      class dbTable {
        String name;
        List<Column> columnNameType;
      
        public dbTable(String name, List<Column> columnNameType) {
          this.name = name;
          this.columnNameType = columnNameType;
        }
      }
      
      class MyMealTestData {
        String mealCategory;
        String mealName;
        String[] ingredients;
      
        MyMealTestData(String mealCategory, String mealName, String[] ingredients) {
          this.mealCategory = mealCategory;
          this.mealName = mealName;
          this.ingredients = ingredients;
        }
      }
      
      public class MealPlannerTests extends StageTest {
      
        static final String DB_URL = "jdbc:postgresql:meals_db";
        static final String USER = "postgres";
        static final String PASS = "1111";
      
        String[] days = new String[]{"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
      
        static final MyMealTestData[] mealsList = new MyMealTestData[]{
                new MyMealTestData("breakfast", "scrambled eggs", new String[]{"eggs", "milk", "cheese"}),
                new MyMealTestData("breakfast", "sandwich", new String[]{"bread", "cheese", "ham"}),
                new MyMealTestData("breakfast", "oatmeal", new String[]{"oats", "milk", "banana", "peanut butter"}),
                new MyMealTestData("breakfast", "english breakfast", new String[]{"eggs", "sausages", "bacon", "tomatoes",
                        "bread"}),
                new MyMealTestData("lunch", "sushi", new String[]{"salmon", "rice", "avocado"}),
                new MyMealTestData("lunch", "chicken salad", new String[]{"chicken", "lettuce", "tomato", "olives"}),
                new MyMealTestData("lunch", "omelette", new String[]{"eggs", "milk", "cheese"}),
                new MyMealTestData("lunch", "salad", new String[]{"lettuce", "tomato", "onion", "cheese", "olives"}),
                new MyMealTestData("dinner", "pumpkin soup", new String[]{"pumpkin", "coconut milk", "curry", "carrots"}),
                new MyMealTestData("dinner", "beef steak", new String[]{"beef steak"}),
                new MyMealTestData("dinner", "pizza", new String[]{"flour", "tomato", "cheese", "salami"}),
                new MyMealTestData("dinner", "tomato soup", new String[]{"tomato", "orzo"})
        };
      
        void checkTableSchema(List<dbTable> tables) {
          try {
            Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);
            DatabaseMetaData meta = connection.getMetaData();
            for (dbTable table : tables) {
              ResultSet tableMeta = meta.getTables(null, null, table.name, null);
              if (!tableMeta.next() || !table.name.equalsIgnoreCase(tableMeta.getString("TABLE_NAME"))) {
                throw new WrongAnswer("The table \"" + table.name + "\" doesn't exist.");
              }
              ResultSet columns = meta.getColumns(null, null, table.name, null);
              List<Column> columnsData = new ArrayList<>();
              while (columns.next()) {
                Column column = new Column(
                        columns.getString("COLUMN_NAME").toLowerCase(),
                        columns.getString("TYPE_NAME").toLowerCase());
                columnsData.add(column);
              }
              for (Column c : table.columnNameType) {
                if (!columnsData.contains(c)) {
                  for (Column c2 : columnsData) {
                    if (c.first.equals(c2.first)) {
                      throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" is of the " +
                              "wrong type.");
                    }
                  }
                  throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" doesn't exist.");
                }
              }
            }
            connection.close();
          } catch (Exception e) {
            throw new WrongAnswer("An exception was thrown, while trying to check the database schema - " + e.getMessage());
          }
        }
      
        void checkConnection() {
          try {
            Class.forName("org.postgresql.Driver");
          } catch (ClassNotFoundException e) {
            throw new WrongAnswer("An exception was thrown, while trying to connect to database. PostgreSQL JDBC Driver is " +
                    "not found.");
          }
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (SQLException e) {
            throw new WrongAnswer("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          if (connection == null) {
            throw new WrongAnswer("Failed to make connection to database");
          }
        }
      
        @DynamicTest(order = 1)
        public CheckResult normalExe12Test() {
      
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          CheckOutput co = new CheckOutput();
          if (!co.start("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, exit)" +
                    "?\"");
          ArrayList<dbTable> tables = new ArrayList<>(Arrays.asList(
                  new dbTable("ingredients", new ArrayList<>(
                          Arrays.asList(
                                  new Column("ingredient", "varchar"),
                                  new Column("ingredient_id", "int4"),
                                  new Column("meal_id", "int4")
                          )
                  )),
                  new dbTable("meals", new ArrayList<>(
                          Arrays.asList(
                                  new Column("category", "varchar"),
                                  new Column("meal", "varchar"),
                                  new Column("meal_id", "int4")
                          )
                  ))
          ));
          checkTableSchema(tables);
      
          if (!co.input("exit", "Bye!"))
            return CheckResult.wrong("Your output should contain \"Bye!\"");
          if (!co.programIsFinished())
            return CheckResult.wrong("The application didn't exit.");
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 2)
        CheckResult normalExe13Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("lunch", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("sushi", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("salmon, rice, avocado", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("lunch", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("omelette", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("eggs, milk, cheese", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("breakfast", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("oatmeal", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("oats, milk, banana, peanut butter", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("lunch", "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado",
                    "Name: omelette", "Ingredients:", "eggs", "milk", "cheese"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("breakfast", "Category: breakfast", "Name: oatmeal", "Ingredients:", "oats",
                    "milk", "banana", "peanut butter"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 3)
        CheckResult normalExe14Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("lunch", "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado",
                    "Name: omelette", "Ingredients:", "eggs", "milk", "cheese"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("breakfast", "Category: breakfast", "Name: oatmeal", "Ingredients:", "oats",
                    "milk", "banana", "peanut butter"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("brunch", "Wrong meal category! Choose from: breakfast, lunch, dinner."))
              return CheckResult.wrong("Wrong output after the input of a category that doesn't exist.");
      
            if (!co.input("dinner", "No meals found."))
              return CheckResult.wrong("Wrong output for a category with no added meals.");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 4)
        CheckResult normalExe15Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");
      
      
            for (MyMealTestData meal : mealsList) {
              if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
                return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, " +
                        "dinner)?\"");
      
              if (!co.input(meal.mealCategory, "Input the meal's name:"))
                return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
              if (!co.input(meal.mealName, "Input the ingredients:"))
                return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
              if (!co.input(String.join(",", meal.ingredients), "The meal has been added!"))
                return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
              if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
                return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                        "exit)?\"");
      
            }
      
            co.getNextOutput("plan");
            int index = 0;
            for (String day : days) {
              if (!co.inputNext(day))
                return CheckResult.wrong("Your output should contain \"" + day + "\"");
      
              String[] categories = new String[]{"breakfast", "lunch", "dinner"};
              String[][] alphabetic = {
                      new String[]{"english breakfast", "oatmeal", "sandwich", "scrambled eggs"},
                      new String[]{"chicken salad", "omelette", "salad", "sushi"},
                      new String[]{"beef steak", "pizza", "pumpkin soup", "tomato soup"}
              };
              for (int i = 0; i < 3; i++) {
                String category = categories[i];
                if (!co.inputNext(alphabetic[i]))
                  return CheckResult.wrong("Make sure that formatting of your output is similar to the one in the example. " +
                          "Also, your output should contain the meals in alphabetic order.");
      
                if (!co.inputNext("Choose the " + category + " for " + day + " from the list above:"))
                  return CheckResult.wrong("Your output should contain the prompt for the " + category + " meal.");
      
                if (!co.input("nonExistMeal", "This meal doesn’t exist. Choose a meal from the list above."))
                  return CheckResult.wrong("Your output should contain \"This meal doesn’t exist. Choose a meal from the " +
                          "list above.\"");
      
                co.getNextOutput(((MyMealTestData) (Arrays.stream(mealsList).filter(x -> x.mealCategory.equals(category)).toArray()[index % 4])).mealName);
              }
              if (!co.inputNext("Yeah! We planned the meals for " + day + "."))
                return CheckResult.wrong("Your output should contain \"Yeah! We planned the meals for " + day + ".\".");
              index++;
            }
      
            String[] planPrintout = new String[]{"Monday", "Breakfast: scrambled eggs", "Lunch: sushi", "Dinner: pumpkin " +
                    "soup",
                    "Tuesday", "Breakfast: sandwich", "Lunch: chicken salad", "Dinner: beef steak",
                    "Wednesday", "Breakfast: oatmeal", "Lunch: omelette", "Dinner: pizza",
                    "Thursday", "Breakfast: english breakfast", "Lunch: salad", "Dinner: tomato soup",
                    "Friday", "Breakfast: scrambled eggs", "Lunch: sushi", "Dinner: pumpkin soup",
                    "Saturday", "Breakfast: sandwich", "Lunch: chicken salad", "Dinner: beef steak",
                    "Sunday", "Breakfast: oatmeal", "Lunch: omelette", "Dinner: pizza"};
      
            for (String line : planPrintout) {
              if (!co.inputNext(line))
                return CheckResult.wrong("Your output should contain \"" + line + "\".");
            }
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
      
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
      }
      
      
      class CheckOutput {
        private TestedProgram main = new TestedProgram();
        private int position = 0;
        private boolean caseInsensitive = true;
        private boolean trimOutput = true;
        private List<String> arguments = new ArrayList<>();
        private boolean isStarted = false;
        private String lastOutput = "";
      
        private boolean checkOutput(String outputString, String... checkStr) {
          int searchPosition = position;
          for (String cStr : checkStr) {
            String str = caseInsensitive ? cStr.toLowerCase() : cStr;
            int findPosition = outputString.indexOf(str, searchPosition);
            if (findPosition == -1) return false;
            if (!outputString.substring(searchPosition, findPosition).isBlank()) return false;
            searchPosition = findPosition + str.length();
          }
          position = searchPosition;
          return true;
        }
      
        public boolean start(String... checkStr) {
          if (isStarted)
            return false;
          var outputString = main.start(arguments.toArray(new String[]{}));
          lastOutput = outputString;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          isStarted = true;
          return checkOutput(outputString, checkStr);
        }
      
        public void stop() {
          main.stop();
        }
      
        public boolean input(String input, String... checkStr) {
          if (main.isFinished()) return false;
          String outputString = main.execute(input);
          lastOutput = outputString;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          position = 0;
          return checkOutput(outputString, checkStr);
        }
      
        public boolean inputNext(String... checkStr) {
          String outputString = lastOutput;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          return checkOutput(outputString, checkStr);
        }
      
        public String getNextOutput(String input) {
          if (main.isFinished()) return "";
          String outputString = main.execute(input);
          lastOutput = outputString;
          position = 0;
          return outputString;
        }
      
        public String getLastOutput() {
          return lastOutput;
        }
      
        public boolean programIsFinished() {
          return main.isFinished();
        }
      
        public void setArguments(String... arguments) {
          this.arguments = Arrays.stream(arguments).toList();
        }
      
        public void setCaseInsensitive(boolean caseInsensitive) {
          this.caseInsensitive = caseInsensitive;
        }
      
        public void setTrimOutput(boolean trimOutput) {
          this.trimOutput = trimOutput;
        }
      }
    learner_created: false
  - name: src/mealplanner/Meal.java
    visible: true
    text: |
      package mealplanner;
      
      import java.util.List;
      
      public class Meal {
          private int meal_id;
          private String category;
          private String name;
          private List<String> ingredients;
      
          public Meal(int meal_id, String category, String name, List<String> ingredients) {
              this.meal_id = meal_id;
              this.category = category;
              this.name = name;
              this.ingredients = ingredients;
          }
      
          public int getMeal_id() {
              return meal_id;
          }
      
          public void setMeal_id(int meal_id) {
              this.meal_id = meal_id;
          }
      
          public String getCategory() {
              return category;
          }
      
          public void setCategory(String category) {
              this.category = category;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public List<String> getIngredients() {
              return ingredients;
          }
      
          public void setIngredients(List<String> ingredients) {
              this.ingredients = ingredients;
          }
      
          @Override
          public String toString() {
              return "Meal{" +
                      "category='" + category + '\'' +
                      ", name='" + name + '\'' +
                      ", ingredients=" + ingredients +
                      '}';
          }
      }
    learner_created: true
  - name: src/mealplanner/MealController.java
    visible: true
    text: |
      package mealplanner;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Scanner;
      
      public class MealController {
          private static final String INGREDIENTS = "Ingredients";
          private static final String NAME = "Name";
          private static final String CATEGORIES = "Category";
      
          static int ID = 1;
      
          private static final String regexIngredients = "^(?!\\s*$)([\\p{L}\\s]+)+$";
      
      
          static List<Meal> meals = new ArrayList<>();
      
          public void initializeDB() {
              DatabaseManager.createMealTable();
              DatabaseManager.createIngredientsTable();
              DatabaseManager.getNumberOfMeals();
              ID = DatabaseManager.getNumberOfMeals();
          }
      
          public void show() {
              List<String> availableCategories = List.of("breakfast", "lunch", "dinner");
      
              Scanner sc = new Scanner(System.in);
      
              List<Meal> meals = DatabaseManager.getMeals();
              if (meals.isEmpty()) {
                  System.out.println("No meals found.");
                  return;
              }
      
              System.out.println("Which category do you want to print (breakfast, lunch, dinner)?");
              String selectedCategory = sc.nextLine();
              while (!availableCategories.contains(selectedCategory)) {
                  System.out.println("Wrong meal category! Choose from: breakfast, lunch, dinner.");
                  selectedCategory = sc.nextLine();
              }
      
              meals = DatabaseManager.getMealsByCategory(selectedCategory);
      
              if (meals.isEmpty()) {
                  System.out.println("No meals found.");
              } else {
                  System.out.println("Category: " + selectedCategory);
                  System.out.println();
              }
      
              for (Meal meal : meals) {
                  if (meal.getCategory().trim().equals(selectedCategory.trim())) {
                      System.out.printf("Name: %s \n", meal.getName().trim());
                      System.out.println("Ingredients: ");
                      for (String ingredient : meal.getIngredients()) {
                          System.out.println(ingredient.trim());
                      }
                      System.out.println();
                  }
              }
      
          }
      
          public static boolean verifyIngredients(String[] ingredients) {
              boolean isValid = true;
              for (String ingredient : ingredients) {
                  if (!ingredient.matches(regexIngredients)) {
                      isValid = false;
                      break;
                  }
              }
              return isValid;
          }
      
          public void add() {
              Scanner sc = new Scanner(System.in);
      
              // Save meal category
              System.out.println("Which meal do you want to add (breakfast, lunch, dinner)?");
              String mealCategory;
              do {
                  mealCategory = sc.nextLine();
                  if (!mealCategory.matches("breakfast|lunch|dinner")) {
                      System.out.println("Wrong meal category! Choose from: breakfast, lunch, dinner.");
                  }
              } while (!mealCategory.matches("breakfast|lunch|dinner"));
      
      
              // Save meal name
              System.out.println("Input the meal's name:");
              String mealName;
              do {
                  mealName = sc.nextLine();
                  if (!mealName.matches("^(?!\\s*$)[a-zA-Z\\s]+$")) {
                      System.out.println("Wrong format. Use letters only!");
                  }
              } while (!mealName.matches("^(?!\\s*$)[a-zA-Z\\s]+$"));
      
      
              // Save Ingredients
              System.out.println("Input the ingredients:");
              String mealIngredients;
              do {
                  mealIngredients = sc.nextLine();
                  String[] ingredients = mealIngredients.split(",");
                  boolean isValidIngredients = verifyIngredients(ingredients);
      
                  if (!isValidIngredients) {
                      System.out.println("Wrong format. Use letters only!");
                  }
              } while (!verifyIngredients(mealIngredients.split(",")));
      
              DatabaseManager.insertMeal(ID, mealCategory, mealName, mealIngredients);
              ID = ID + 1;
          }
      
      }
    learner_created: true
  - name: src/mealplanner/Ingredient.java
    visible: true
    text: |
      package mealplanner;
      
      public class Ingredient {
          private int ingredient_id;
          private String ingredient;
          private int meal_id;
      
          public Ingredient(int ingredient_id, String ingredient, int meal_id) {
              this.ingredient_id = ingredient_id;
              this.ingredient = ingredient;
              this.meal_id = meal_id;
          }
      
          public int getIngredient_id() {
              return ingredient_id;
          }
      
          public void setIngredient_id(int ingredient_id) {
              this.ingredient_id = ingredient_id;
          }
      
          public String getIngredient() {
              return ingredient;
          }
      
          public void setIngredient(String ingredient) {
              this.ingredient = ingredient;
          }
      
          public int getMeal_id() {
              return meal_id;
          }
      
          public void setMeal_id(int meal_id) {
              this.meal_id = meal_id;
          }
      }
    learner_created: true
  - name: src/mealplanner/DatabaseManager.java
    visible: true
    text: |-
      package mealplanner;
      
      import java.sql.*;
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      
      public class DatabaseManager {
          static String DB_URL = "jdbc:postgresql:meals_db";
          static String USER = "postgres";
          static String PASS = "1111";
      
          public DatabaseManager() {
              createMealTable();
              createIngredientsTable();
          }
      
      
          public static void createMealTable() {
              String createMealTable = "CREATE TABLE IF NOT EXISTS meals (" +
                      "meal_id INTEGER NOT NULL, category VARCHAR(30) NOT NULL, meal VARCHAR(50) NOT NULL" +
                      ")";
              try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS)) {
                  connection.setAutoCommit(true);
                  PreparedStatement preparedStatement = connection.prepareStatement(createMealTable);
                  preparedStatement.executeUpdate();
              } catch (SQLException e) {
                  System.out.println(Arrays.toString(e.getStackTrace()));
              }
          }
      
          public static void createIngredientsTable() {
              String createIngredientsTable = "CREATE TABLE IF NOT EXISTS ingredients (" +
                      "ingredient VARCHAR NOT NULL, ingredient_id INTEGER NOT NULL, meal_id INTEGER NOT NULL" +
                      ")";
              try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS)) {
                  connection.setAutoCommit(true);
                  PreparedStatement preparedStatement = connection.prepareStatement(createIngredientsTable);
                  preparedStatement.executeUpdate();
              } catch (SQLException e) {
                  System.out.println(Arrays.toString(e.getStackTrace()));
              }
          }
      
          public static void insertMeal(int mealID, String mealCategory, String mealName, String ingredient) {
              String insert = "INSERT INTO meals (meal_id, category, meal) VALUES(?, ?, ?)";
              try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS)) {
                  connection.setAutoCommit(true);
                  PreparedStatement preparedStatement = connection.prepareStatement(insert);
                  preparedStatement.setInt(1, mealID);
                  preparedStatement.setString(2, mealCategory);
                  preparedStatement.setString(3, mealName);
                  preparedStatement.executeUpdate();
      
              } catch (SQLException e) {
                  System.out.println(Arrays.toString(e.getStackTrace()));
              }
              insertIngredient(mealID, ingredient, mealID);
      
              System.out.println("The meal has been added!");
          }
      
          public static void insertIngredient(int ingredientID, String ingredient, int mealID) {
              String insert = "INSERT INTO ingredients (ingredient_id, ingredient, meal_id) VALUES(?, ?, ?)";
              try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS)) {
                  connection.setAutoCommit(true);
                  PreparedStatement preparedStatement = connection.prepareStatement(insert);
                  preparedStatement.setInt(1, ingredientID);
                  preparedStatement.setString(2, ingredient);
                  preparedStatement.setInt(3, mealID);
                  preparedStatement.executeUpdate();
              } catch (SQLException e) {
                  System.out.println(Arrays.toString(e.getStackTrace()));
              }
          }
      
          // Get list of all meals in the database
          public static List<Meal> getMeals() {
      
              List<Ingredient> ingredients = getIngredients();
      
              List<Meal> meals = new ArrayList<>();
      
              String selectAllMeals = "SELECT * FROM meals";
      
              return getMeals(ingredients, meals, selectAllMeals);
          }
      
          // Get meals by their category
          public static List<Meal> getMealsByCategory(String category) {
              List<Ingredient> ingredients = getIngredients();
      
              List<Meal> meals = new ArrayList<>();
      
              String selectAllMeals = String.format("SELECT * FROM meals WHERE category = '%s'", category);
      
              return getMeals(ingredients, meals, selectAllMeals);
          }
      
          // General method to get meals
          private static List<Meal> getMeals(List<Ingredient> ingredients, List<Meal> meals, String selectAllMeals) {
              try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS)) {
                  PreparedStatement preparedStatement = connection.prepareStatement(selectAllMeals);
                  ResultSet rs = preparedStatement.executeQuery();
                  while (rs.next()) {
                      int mealID = rs.getInt("meal_id");
                      for (Ingredient ingredient : ingredients) {
                          if (ingredient.getMeal_id() == mealID) {
                              Meal meal = new Meal(
                                      rs.getInt("meal_id"),
                                      rs.getString("category"),
                                      rs.getString("meal"),
                                      List.of(ingredient.getIngredient().split(","))
                              );
                              meals.add(meal);
                          }
                      }
      
                  }
              } catch (SQLException e) {
                  System.out.println(Arrays.toString(e.getStackTrace()));
              }
      
              return meals;
          }
      
          public static List<Ingredient> getIngredients() {
      
              List<Ingredient> ingredients = new ArrayList<>();
      
              String selectAllIngredients = "SELECT * FROM ingredients";
      
              try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS)) {
                  PreparedStatement preparedStatement = connection.prepareStatement(selectAllIngredients);
                  ResultSet rs = preparedStatement.executeQuery();
                  while (rs.next()) {
                      Ingredient ingredient = new Ingredient(rs.getInt("ingredient_id"), rs.getString("ingredient"), rs.getInt("meal_id"));
                      ingredients.add(ingredient);
                  }
              } catch (SQLException e) {
                  System.out.println(Arrays.toString(e.getStackTrace()));
              }
      
              return ingredients;
          }
      
          public static int getNumberOfMeals() {
              int count = 0;
              String countAllMeals = "SELECT COUNT(*) FROM meals";
              try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS)) {
                  PreparedStatement preparedStatement = connection.prepareStatement(countAllMeals);
                  ResultSet rs = preparedStatement.executeQuery();
                  rs.next();
                  count = rs.getInt(1);
              } catch (SQLException e) {
                  System.out.println(Arrays.toString(e.getStackTrace()));
              }
              return count;
          }
      }
    learner_created: true
  - name: src/mealplanner/MealDao.java
    visible: true
    learner_created: true
  - name: src/mealplanner/MealDaoImpl.java
    visible: true
    learner_created: true
  - name: src/mealplanner/MealDBClient.java
    visible: true
    learner_created: true
  - name: src/mealplanner/Plan.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/318/stages/1787/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 07 Apr 2024 20:41:28 UTC"
record: -1
